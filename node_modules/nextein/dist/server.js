'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _http = require('http');

var _http2 = _interopRequireDefault(_http);

var _next = require('next');

var _next2 = _interopRequireDefault(_next);

var _url = require('url');

var _pathMatch = require('path-match');

var _pathMatch2 = _interopRequireDefault(_pathMatch);

var _path = require('path');

var _load = require('./entries/load');

var _load2 = _interopRequireDefault(_load);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Server = function () {
  function Server(_ref) {
    var _this = this;

    var _ref$dir = _ref.dir,
        dir = _ref$dir === undefined ? '.' : _ref$dir,
        _ref$dev = _ref.dev,
        dev = _ref$dev === undefined ? true : _ref$dev;

    _classCallCheck(this, Server);

    this.handleRequest = async function (req, res) {
      var entriesMap = _this.entriesMap,
          app = _this.app;

      var parsedUrl = (0, _url.parse)(req.url, true);
      var pathname = parsedUrl.pathname;


      var matchEntry = (0, _pathMatch2.default)()('/_load_entry/:path+');
      var entryParam = matchEntry(pathname);

      if (pathname === '/_load_entries') {
        res.writeHead(200, { 'Content-Type': 'application/json' });
        return res.end(_this.entriesAsJSON());
      }

      if (entryParam) {
        var path = entryParam.path.join(_path.sep);

        if (path) {
          var e = await (0, _load.byFileName)(path);

          res.writeHead(200, { 'Content-Type': 'application/json' });
          return res.end(JSON.stringify(e));
        }
      }

      if (entriesMap.has(pathname)) {
        var entry = entriesMap.get(pathname);
        var page = entry.data.page || 'post';
        return app.render(req, res, '/' + page, { _entry: entry.data._entry });
      }

      app.handleRequest(req, res, parsedUrl);
    };

    this.app = (0, _next2.default)({ dev: dev });
  }

  _createClass(Server, [{
    key: 'readEntries',
    value: async function readEntries() {
      var entries = await (0, _load2.default)();
      var kv = entries.map(function (entry) {
        var data = entry.data;
        var url = data.url;

        return [url, entry];
      });

      this.entriesMap = new Map(kv);
    }
  }, {
    key: 'entriesAsJSON',
    value: function entriesAsJSON() {
      var entriesMap = this.entriesMap;

      return JSON.stringify(Array.from(entriesMap.values()));
    }
  }, {
    key: 'start',
    value: async function start(port, hostname) {
      var _this2 = this;

      await this.readEntries();
      await this.app.prepare();
      this.http = _http2.default.createServer(this.handleRequest);
      await new Promise(function (resolve, reject) {
        // This code catches EADDRINUSE error if the port is already in use
        _this2.http.on('error', reject);
        _this2.http.on('listening', function () {
          return resolve();
        });
        _this2.http.listen(port, hostname);
      });
    }
  }]);

  return Server;
}();

exports.default = Server;